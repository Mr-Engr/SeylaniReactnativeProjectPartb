{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport MainLogin from \"../Screens/login/login\";\nimport SignUpPublic from \"../Screens/public-sign-up/sign\";\nimport MainHome from \"../Screens/home/home\";\nimport { auth, onAuthStateChanged, doc, getDoc, db, collection } from \"../configs/firebase\";\nimport { GlobalContext } from \"../context/context\";\nimport locationMap from \"../components/maps/location\";\nimport Pending from \"../Screens/pending/pending\";\nimport Approved from \"../Screens/approved/approved\";\nimport BranchManager from \"../Screens/branch-manager/branch-manager\";\nimport Logout from \"../Screens/logout/logout\";\nvar Stack = createNativeStackNavigator();\nvar Drawer = createDrawerNavigator();\n\nfunction App() {\n  var _React$useContext = React.useContext(GlobalContext),\n      state = _React$useContext.state,\n      dispatch = _React$useContext.dispatch;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      userData = _React$useState2[0],\n      setUserData = _React$useState2[1];\n\n  React.useEffect(function () {\n    onAuthStateChanged(auth, function _callee(user) {\n      var userRef, userSaved, userDetails, publicApplicationsRef, getApplication, approvedApplications, getApprovation;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!user) {\n                _context.next = 26;\n                break;\n              }\n\n              _context.prev = 1;\n              userRef = doc(db, \"users\", user.uid);\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(getDoc(userRef));\n\n            case 5:\n              userSaved = _context.sent;\n              userDetails = userSaved.data();\n              dispatch({\n                type: \"ACTIVE_USER\",\n                payload: userDetails\n              });\n              publicApplicationsRef = doc(db, \"publcApplicaitons\", user.uid);\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(getDoc(publicApplicationsRef));\n\n            case 11:\n              getApplication = _context.sent;\n              dispatch({\n                type: \"publicApplications\",\n                payload: getApplication.data()\n              });\n              approvedApplications = doc(db, \"approvedApplications\", user.uid);\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(getDoc(approvedApplications));\n\n            case 16:\n              getApprovation = _context.sent;\n              dispatch({\n                type: \"ApprovedApplication\",\n                payload: getApprovation.data()\n              });\n              _context.next = 23;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0, \"error\");\n\n            case 23:\n              setUserData(user);\n              _context.next = 27;\n              break;\n\n            case 26:\n              console.log(\"user not found\");\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 20]], Promise);\n    });\n  }, []);\n  return React.createElement(NavigationContainer, null, React.createElement(Drawer.Navigator, null, userData ? React.createElement(React.Fragment, null, state.activeUser.role === \"public\" ? state.approvedApplications ? React.createElement(React.Fragment, null, React.createElement(Drawer.Screen, {\n    name: \"Approved\",\n    component: Approved\n  }), React.createElement(Drawer.Screen, {\n    name: \"logout\",\n    component: Logout\n  })) : React.createElement(React.Fragment, null, React.createElement(Drawer.Screen, {\n    name: \"pending\",\n    component: Pending\n  }), React.createElement(Drawer.Screen, {\n    name: \"logout\",\n    component: Logout\n  })) : React.createElement(React.Fragment, null, React.createElement(Drawer.Screen, {\n    name: \"branchManager\",\n    component: BranchManager\n  }), React.createElement(Drawer.Screen, {\n    name: \"logout\",\n    component: Logout\n  }))) : React.createElement(React.Fragment, null)));\n}\n\nexport default App;","map":{"version":3,"sources":["E:/SMIT WORK/React Js/ReactNativeDrawer/src/navigation/routes.js"],"names":["React","NavigationContainer","createNativeStackNavigator","createDrawerNavigator","MainLogin","SignUpPublic","MainHome","auth","onAuthStateChanged","doc","getDoc","db","collection","GlobalContext","locationMap","Pending","Approved","BranchManager","Logout","Stack","Drawer","App","useContext","state","dispatch","useState","userData","setUserData","useEffect","user","userRef","uid","userSaved","userDetails","data","type","payload","publicApplicationsRef","getApplication","approvedApplications","getApprovation","console","log","activeUser","role"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { createDrawerNavigator } from '@react-navigation/drawer';\r\nimport MainLogin from '../Screens/login/login';\r\nimport SignUpPublic from '../Screens/public-sign-up/sign';\r\nimport MainHome from '../Screens/home/home';\r\nimport { auth , onAuthStateChanged  , doc , getDoc , db , collection } from '../configs/firebase';\r\nimport { GlobalContext } from '../context/context';\r\nimport locationMap from '../components/maps/location';\r\nimport Pending from '../Screens/pending/pending';\r\nimport Approved from '../Screens/approved/approved';\r\nimport BranchManager from '../Screens/branch-manager/branch-manager';\r\nimport Logout from '../Screens/logout/logout';\r\n\r\nconst Stack = createNativeStackNavigator();\r\nconst Drawer = createDrawerNavigator();\r\n\r\nfunction App() {\r\n  let {state , dispatch}= React.useContext(GlobalContext);\r\n  let [userData , setUserData] = React.useState()\r\n  React.useEffect(()=>{\r\n    onAuthStateChanged(auth, async (user)=>{\r\n      if(user){\r\n        // console.log(user, \"user Found\");\r\n        try {\r\n          let userRef = doc(db,\"users\" , user.uid)\r\n          let userSaved = await getDoc(userRef)\r\n          let userDetails = userSaved.data()\r\n          dispatch({type : \"ACTIVE_USER\" , payload : userDetails})\r\n\r\n          let publicApplicationsRef = doc(db, \"publcApplicaitons\" , user.uid)\r\n          let getApplication = await getDoc(publicApplicationsRef)\r\n          dispatch({type : \"publicApplications\" , payload : getApplication.data()})\r\n\r\n          let approvedApplications = doc(db,\"approvedApplications\" , user.uid)\r\n          let getApprovation = await getDoc(approvedApplications);\r\n          dispatch({type : \"ApprovedApplication\" , payload : getApprovation.data()})\r\n\r\n        } catch (error) {\r\n          console.log(error, \"error\")\r\n        }\r\n        setUserData(user)\r\n      }else{\r\n        console.log(\"user not found\")\r\n      }\r\n    })\r\n  },[])\r\n  return (\r\n    <NavigationContainer>\r\n      {/* <Stack.Navigator>\r\n        <Stack.Screen name=\"logout\" component={Login} />\r\n      </Stack.Navigator> */}\r\n      <Drawer.Navigator>\r\n      {\r\n        userData ? (\r\n          <>\r\n         {\r\n           state.activeUser.role === \"public\" ? (\r\n            state.approvedApplications ? (\r\n              <>\r\n              <Drawer.Screen name=\"Approved\" component={Approved} />\r\n              <Drawer.Screen name=\"logout\" component={Logout} />\r\n              </>\r\n            ) : (\r\n              <>\r\n              <Drawer.Screen name=\"pending\" component={Pending} />\r\n              <Drawer.Screen name=\"logout\" component={Logout} />\r\n              </>\r\n            )\r\n           ) : (\r\n             <>\r\n                <Drawer.Screen name=\"branchManager\" component={BranchManager} />\r\n                <Drawer.Screen name=\"logout\" component={Logout} />\r\n                \r\n             </>\r\n            \r\n           )\r\n         }\r\n          \r\n          </>\r\n        ) : (\r\n          <>\r\n            {/* <Drawer.Screen name=\"Login\"  component={MainLogin} /> */}\r\n            {/* <Drawer.Screen name=\"Sign-up\" component={SignUpPublic} /> */}\r\n          </>\r\n        )\r\n      }\r\n      </Drawer.Navigator>\r\n\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n"]},"metadata":{},"sourceType":"module"}