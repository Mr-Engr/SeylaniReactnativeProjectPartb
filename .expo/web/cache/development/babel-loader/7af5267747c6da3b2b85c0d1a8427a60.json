{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport MainLogin from \"../Screens/login/login\";\nimport SignUpPublic from \"../Screens/public-sign-up/sign\";\nimport MainHome from \"../Screens/home/home\";\nimport { auth, onAuthStateChanged, doc, getDoc, db } from \"../configs/firebase\";\nimport { GlobalContext } from \"../context/context\";\nimport locationMap from \"../components/maps/location\";\nvar Stack = createNativeStackNavigator();\nvar Drawer = createDrawerNavigator();\n\nfunction App() {\n  var _React$useContext = React.useContext(GlobalContext),\n      state = _React$useContext.state,\n      dispatch = _React$useContext.dispatch;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      userData = _React$useState2[0],\n      setUserData = _React$useState2[1];\n\n  React.useEffect(function () {\n    onAuthStateChanged(auth, function _callee(user) {\n      var userRef, userSaved, userDetails, publicApplicationsRef, getApplication;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!user) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.prev = 1;\n              userRef = doc(db, \"users\", user.uid);\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(getDoc(userRef));\n\n            case 5:\n              userSaved = _context.sent;\n              userDetails = userSaved.data();\n              dispatch({\n                type: \"ACTIVE_USER\",\n                payload: userDetails\n              });\n              publicApplicationsRef = doc(db, \"publcApplicaitons\", user.uid);\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(getDoc(publicApplicationsRef));\n\n            case 11:\n              getApplication = _context.sent;\n              dispatch({\n                type: \"publicApplications\",\n                payload: getApplication.data()\n              });\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0, \"error\");\n\n            case 18:\n              setUserData(user);\n              _context.next = 22;\n              break;\n\n            case 21:\n              console.log(\"user not found\");\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 15]], Promise);\n    });\n  }, []);\n  return React.createElement(NavigationContainer, null, React.createElement(Drawer.Navigator, null, userData ? React.createElement(React.Fragment, null, React.createElement(Drawer.Screen, {\n    name: \"home\",\n    component: MainHome\n  })) : React.createElement(React.Fragment, null, React.createElement(Drawer.Screen, {\n    name: \"Login\",\n    component: MainLogin\n  }), React.createElement(Drawer.Screen, {\n    name: \"Sign-up\",\n    component: SignUpPublic\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/hamza/Desktop/AbdulSaboor/ReactNativeDrawer/src/navigation/routes.js"],"names":["React","NavigationContainer","createNativeStackNavigator","createDrawerNavigator","MainLogin","SignUpPublic","MainHome","auth","onAuthStateChanged","doc","getDoc","db","GlobalContext","locationMap","Stack","Drawer","App","useContext","state","dispatch","useState","userData","setUserData","useEffect","user","userRef","uid","userSaved","userDetails","data","type","payload","publicApplicationsRef","getApplication","console","log"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,OAAOC,SAAP;AACA,OAAOC,YAAP;AACA,OAAOC,QAAP;AACA,SAASC,IAAT,EAAgBC,kBAAhB,EAAsCC,GAAtC,EAA4CC,MAA5C,EAAqDC,EAArD;AACA,SAASC,aAAT;AACA,OAAOC,WAAP;AAEA,IAAMC,KAAK,GAAGZ,0BAA0B,EAAxC;AACA,IAAMa,MAAM,GAAGZ,qBAAqB,EAApC;;AAEA,SAASa,GAAT,GAAe;AACb,0BAAwBhB,KAAK,CAACiB,UAAN,CAAiBL,aAAjB,CAAxB;AAAA,MAAKM,KAAL,qBAAKA,KAAL;AAAA,MAAaC,QAAb,qBAAaA,QAAb;;AACA,wBAA+BnB,KAAK,CAACoB,QAAN,EAA/B;AAAA;AAAA,MAAKC,QAAL;AAAA,MAAgBC,WAAhB;;AACAtB,EAAAA,KAAK,CAACuB,SAAN,CAAgB,YAAI;AAClBf,IAAAA,kBAAkB,CAACD,IAAD,EAAO,iBAAOiB,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACpBA,IADoB;AAAA;AAAA;AAAA;;AAAA;AAIfC,cAAAA,OAJe,GAILhB,GAAG,CAACE,EAAD,EAAI,OAAJ,EAAca,IAAI,CAACE,GAAnB,CAJE;AAAA;AAAA,+CAKGhB,MAAM,CAACe,OAAD,CALT;;AAAA;AAKfE,cAAAA,SALe;AAMfC,cAAAA,WANe,GAMDD,SAAS,CAACE,IAAV,EANC;AAOnBV,cAAAA,QAAQ,CAAC;AAACW,gBAAAA,IAAI,EAAG,aAAR;AAAwBC,gBAAAA,OAAO,EAAGH;AAAlC,eAAD,CAAR;AAEII,cAAAA,qBATe,GASSvB,GAAG,CAACE,EAAD,EAAK,mBAAL,EAA2Ba,IAAI,CAACE,GAAhC,CATZ;AAAA;AAAA,+CAUQhB,MAAM,CAACsB,qBAAD,CAVd;;AAAA;AAUfC,cAAAA,cAVe;AAWnBd,cAAAA,QAAQ,CAAC;AAACW,gBAAAA,IAAI,EAAG,oBAAR;AAA+BC,gBAAAA,OAAO,EAAGE,cAAc,CAACJ,IAAf;AAAzC,eAAD,CAAR;AAXmB;AAAA;;AAAA;AAAA;AAAA;AAanBK,cAAAA,OAAO,CAACC,GAAR,cAAmB,OAAnB;;AAbmB;AAerBb,cAAAA,WAAW,CAACE,IAAD,CAAX;AAfqB;AAAA;;AAAA;AAiBrBU,cAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AAjBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP,CAAlB;AAoBD,GArBD,EAqBE,EArBF;AAsBA,SACE,oBAAC,mBAAD,QACE,oBAAC,MAAD,CAAQ,SAAR,QAEEd,QAAQ,GACN,0CACA,oBAAC,MAAD,CAAQ,MAAR;AAAe,IAAA,IAAI,EAAC,MAApB;AAA2B,IAAA,SAAS,EAAEf;AAAtC,IADA,CADM,GAON,0CACE,oBAAC,MAAD,CAAQ,MAAR;AAAe,IAAA,IAAI,EAAC,OAApB;AAA4B,IAAA,SAAS,EAAEF;AAAvC,IADF,EAEE,oBAAC,MAAD,CAAQ,MAAR;AAAe,IAAA,IAAI,EAAC,SAApB;AAA8B,IAAA,SAAS,EAAEC;AAAzC,IAFF,CATJ,CADF,CADF;AAqBD;;AAED,eAAeW,GAAf","sourcesContent":["import * as React from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { createDrawerNavigator } from '@react-navigation/drawer';\r\nimport MainLogin from '../Screens/login/login';\r\nimport SignUpPublic from '../Screens/public-sign-up/sign';\r\nimport MainHome from '../Screens/home/home';\r\nimport { auth , onAuthStateChanged  , doc , getDoc , db} from '../configs/firebase';\r\nimport { GlobalContext } from '../context/context';\r\nimport locationMap from '../components/maps/location';\r\n\r\nconst Stack = createNativeStackNavigator();\r\nconst Drawer = createDrawerNavigator();\r\n\r\nfunction App() {\r\n  let {state , dispatch}= React.useContext(GlobalContext);\r\n  let [userData , setUserData] = React.useState()\r\n  React.useEffect(()=>{\r\n    onAuthStateChanged(auth, async (user)=>{\r\n      if(user){\r\n        // console.log(user, \"user Found\");\r\n        try {\r\n          let userRef = doc(db,\"users\" , user.uid)\r\n          let userSaved = await getDoc(userRef)\r\n          let userDetails = userSaved.data()\r\n          dispatch({type : \"ACTIVE_USER\" , payload : userDetails})\r\n\r\n          let publicApplicationsRef = doc(db, \"publcApplicaitons\" , user.uid)\r\n          let getApplication = await getDoc(publicApplicationsRef)\r\n          dispatch({type : \"publicApplications\" , payload : getApplication.data()})\r\n        } catch (error) {\r\n          console.log(error, \"error\")\r\n        }\r\n        setUserData(user)\r\n      }else{\r\n        console.log(\"user not found\")\r\n      }\r\n    })\r\n  },[])\r\n  return (\r\n    <NavigationContainer>\r\n      <Drawer.Navigator>\r\n      {\r\n        userData ? (\r\n          <>\r\n          <Drawer.Screen name=\"home\" component={MainHome} />\r\n          \r\n          {/* <Drawer.Screen name=\"location\" component={locationMap} /> */}\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Drawer.Screen name=\"Login\" component={MainLogin} />\r\n            <Drawer.Screen name=\"Sign-up\" component={SignUpPublic} />\r\n          </>\r\n        )\r\n      }\r\n      </Drawer.Navigator>\r\n\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}